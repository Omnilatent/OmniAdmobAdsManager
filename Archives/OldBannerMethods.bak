public class AdMobManager
{
    #region Banner
    public void ShowBanner(AdPlacement.Type placementType, Omnilatent.AdsMediation.BannerTransform bannerTransform, AdsManager.InterstitialDelegate onAdLoaded = null)
        {
            string id = CustomMediation.GetAdmobID(placementType);
            GoogleMobileAds.Api.AdPosition adPosition = GoogleMobileAds.Api.AdPosition.Bottom;
            if (bannerTransform.adPosition != Omnilatent.AdsMediation.AdPosition.Unset)
            {
                adPosition = (GoogleMobileAds.Api.AdPosition)bannerTransform.adPosition;
            }
            //ShowBanner(id, AdSize.GetCurrentOrientationAnchoredAdaptiveBannerAdSizeWithWidth(AdSize.FullWidth), adPosition, 0f, onAdLoaded);
    
            AdSize adSize = bannerTransform.adSizeData as AdSize;
            if (adSize == null) { adSize = AdSize.GetCurrentOrientationAnchoredAdaptiveBannerAdSizeWithWidth(AdSize.FullWidth); }
    
            if (currentBannerAd != null && currentBannerAd.AdPlacementType == placementType)
            {
                onAdLoaded?.Invoke(true);
                currentBannerAd.BannerView.Show();
                currentBannerAd.State = AdObjectState.Showing;
                onBannerShow?.Invoke(currentBannerAd.AdPlacementType);
            }
            else
            {
                //.Log(string.Format("destroying current banner({0} {1}), showing new one", AdsManager.bannerId, currentBannerSize));
                DestroyBanner();
                RequestBanner(placementType, adSize, adPosition, onAdLoaded);
            }
        }
        
    public void RequestBanner(AdPlacement.Type placementType, AdSize adSize, GoogleMobileAds.Api.AdPosition adPosition, AdsManager.InterstitialDelegate onAdLoaded = null)
    {
        string placementId = CustomMediation.GetAdmobID(placementType);
        if (this.currentBannerAd == null)
        {
            AdMobManager.bannerId = placementId;
            // Create a smart banner at the bottom of the screen.
            currentBannerAd = new AdmobBannerAdObject(placementType, onAdLoaded);
            currentBannerAd.BannerView = new BannerView(placementId, adSize, adPosition);

            // Load a banner ad.
            currentBannerAd.BannerView.OnAdFailedToLoad += OnBannerAdsFailedToLoad;
            currentBannerAd.BannerView.OnAdLoaded += OnBannerAdsLoaded;
            currentBannerAd.BannerView.OnPaidEvent += OnBannerPaidEvent;
            currentBannerAd.State = AdObjectState.Loading;
            currentBannerAd.BannerView.LoadAd(this.CreateAdRequest());
        }
    }

    void OnBannerAdsFailedToLoad(object sender, AdFailedToLoadEventArgs args)
    {
        QueueMainThreadExecution(() =>
        {
            ShowError(args);
            GetCurrentBannerAdObject().onAdLoaded?.Invoke(false);
            onBannerFailedToLoad?.Invoke(GetCurrentBannerAdObject().AdPlacementType, args);
            DestroyBanner();
        });
    }

    void OnBannerAdsLoaded(object sender, EventArgs args)
    {
        QueueMainThreadExecution(() =>
        {
            if (this.currentBannerAd != null && currentBannerAd.State != AdObjectState.Closed)
            {
                currentBannerAd.BannerView.Show();
                currentBannerAd.State = AdObjectState.Showing;
                onBannerShow?.Invoke(currentBannerAd.AdPlacementType);
            }
            GetCurrentBannerAdObject().onAdLoaded?.Invoke(true);
            onBannerLoaded?.Invoke(currentBannerAd.AdPlacementType, args);
        });
    }

    void OnBannerPaidEvent(object sender, AdValueEventArgs args)
    {
        QueueMainThreadExecution(() => { onBannerPaidEvent?.Invoke(GetCurrentBannerAdObject().AdPlacementType, args); });
    }

    public void DestroyBanner()
    {
        if (this.currentBannerAd != null)
        {
            currentBannerAd.BannerView.OnAdFailedToLoad -= OnBannerAdsFailedToLoad;
            currentBannerAd.BannerView.Destroy();
            currentBannerAd.BannerView = null;
            currentBannerAd = null;
        }
    }

    [Obsolete("Use ShowBanner(AdPlacement.Type) instead", true)]
    public void ShowBanner(string placementId, AdSize adSize, GoogleMobileAds.Api.AdPosition adPosition, float delay = 0f, AdsManager.InterstitialDelegate onAdLoaded = null)
    {
        if (noAds != null && noAds())
        {
            onAdLoaded?.Invoke(false);
            return;
        }
        bannerLoadedDelegate = onAdLoaded;
        if (adSize == null)
        {
            Debug.Log("Admob Banner No AdSize parameter");
            adSize = AdSize.Banner;
        }
        if (this.bannerView != null && AdMobManager.bannerId == placementId && currentBannerSize == adSize)
        {
            onAdLoaded?.Invoke(true);
            if (delay > 0 && Time.timeScale > 0)
            {
                Invoke("CoShowBanner", delay);
            }
            else
            {
                CoShowBanner();
            }
        }
        else
        {
            //.Log(string.Format("destroying current banner({0} {1}), showing new one", AdsManager.bannerId, currentBannerSize));
            DestroyBanner();
            //RequestBanner(placementId, adSize, adPosition);
        }

        isShowBanner = true;
    }

    void CoShowBanner()
    {
        if (noAds != null && noAds())
            return;

        if (this.bannerView != null)
        {
            this.bannerView.Show();
        }
    }

    public void HideBanner()
    {
        CancelInvoke("CoShowBanner");

        if (currentBannerAd != null && currentBannerAd.BannerView != null)
        {
            currentBannerAd.BannerView.Hide();
            currentBannerAd.State = AdObjectState.Closed;
            onBannerHide?.Invoke(currentBannerAd.AdPlacementType);
        }
    }

    private AdmobBannerAdObject GetCurrentBannerAdObject(bool makeNewIfNull = true)
    {
        if (currentBannerAd == null)
        {
            Debug.LogError("currentBannerAd is null.");
            if (makeNewIfNull)
            {
                Debug.Log("New ad will be created");
                currentBannerAd = new AdmobBannerAdObject();
            }
        }
        return currentBannerAd;
    }
    #endregion
}